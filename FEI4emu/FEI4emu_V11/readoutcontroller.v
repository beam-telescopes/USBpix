//
// Module ReadOutControl_lib.ReadOutController.struct
//
// Created:
//          by - jds.UNKNOWN (SJALOT)
//          at - 09:38:33  6-05-2010
//
// Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
//

`resetall
`timescale 1ns/10ps
module ReadOutController( 
   // Port Declarations
   input   wire                  ClearBC, 
   input   wire                  ClearTrigId, 
   input   wire  signed          Clk, 
   input   wire          [6:0]   Column, 
   input   wire                  Conf_Addr_Enable, 
   input   wire          [15:0]  Conf_Address, 
   input   wire          [15:0]  Conf_Data, 
   input   wire                  Conf_Write, 
   input   wire                  DataAqEnable, 
   input   wire                  EBWrite, 
   input   wire                  ErrorReq, 
   input   wire                  L1_Trig_In, 
   input   wire                  ReadSkipped, 
   input   wire                  Read_Fifo, 
   input   wire                  Read_clk_fifo, 
   input   wire                  ReadyFormater, 
   input   wire                  Reset, 
   input   wire          [8:0]   Row, 
   input   wire          [15:0]  Ser_Data, 
   input   wire          [2:0]   Token, 
   input   wire          [3:0]   TotBottom, 
   input   wire          [3:0]   TotTop, 
   input   wire          [3:0]   Trigger_Count, 
   input   wire                  Write_Service, 
   output  wire                  BC_Counter_Error, 
   output  wire                  Conf_Free, 
   output  wire          [7:0]   Data_Word0, 
   output  wire          [7:0]   Data_Word1, 
   output  wire          [7:0]   Data_Word2, 
   output  wire                  EBInWrite, 
   output  wire                  Empty, 
   output  wire                  Fifo_Full, 
   output  wire                  Hamming_Error0, 
   output  wire                  Hamming_Error1, 
   output  wire                  Hamming_Error2, 
   output  wire          [3:0]   L1In, 
   output  wire                  L1In_Counter_Error, 
   output  wire          [3:0]   L1Req, 
   output  wire                  L1Req_Counter_Error, 
   output  wire                  L1Trig_Out, 
   output  wire                  L1_Register_Error, 
   output  wire                  L1_Trig_Id_Error, 
   output  wire                  NotFull, 
   output  wire                  Read, 
   output  wire                  ReadOut_Processor_Error, 
   output  wire                  Reset_Serv_Req, 
   output  wire          [7:0]   Skipped, 
   output  wire                  TriggerFinish
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [7:0]  BC;
wire         DataAvaleble;
wire  [35:0] FifoIn;
wire  [11:0] Hamming_Data;
wire  [11:0] Hamming_Data1;
wire  [11:0] Hamming_Data2;
wire  [23:0] Header;
wire  [22:0] Header1;
wire         ID_nData;
wire  [6:0]  L1TrigId;
wire         L1_Reg_Full;
wire         NewDataReq;
wire         NewL1Req;
wire         Reset_Req;
wire         TrigOut;
wire         W_Req_Ser;
wire  [7:0]  Word0;
wire  [7:0]  Word1;
wire  [7:0]  Word2;
wire  [11:0] Word3;
wire  [11:0] Word4;
wire  [11:0] Word5;
wire         Write_Conf;
wire         Write_Conf_Req;
wire         Write_Serv_Req;
wire  [35:0] rdata;
wire         wclk;
wire         wfull;
wire         winc_in;
wire         winc_out;


// Instances 
Add_Flags U_19( 
   .Header    (Header1), 
   .ServReq   (W_Req_Ser), 
   .Headerout (Header), 
   .ErrorReq  (ErrorReq)
); 

BC_Counter U_17( 
   .Clk     (Clk), 
   .Reset   (Reset), 
   .ClearBC (ClearBC), 
   .BC      (BC), 
   .Error   (BC_Counter_Error)
); 

BC_Register U_3( 
   .BC          (BC), 
   .Clk         (Clk), 
   .L1          (TrigOut), 
   .L1In        (L1In), 
   .L1Req       (L1Req), 
   .L1_Reg_Full (L1_Reg_Full), 
   .LV1Id       (L1TrigId), 
   .Reset       (Reset), 
   .Header      (Header1)
); 

Data_Concentrator U_10( 
   .Column           (Column), 
   .Row              (Row), 
   .TotTop           (TotTop), 
   .TotBottom        (TotBottom), 
   .Word0            (Word0), 
   .Word1            (Word1), 
   .Word2            (Word2), 
   .Conf_Data        (Conf_Data), 
   .Conf_Address     (Conf_Address), 
   .Conf_Write       (Conf_Write), 
   .Conf_Free        (Conf_Free), 
   .Write_Service    (Write_Service), 
   .Write_Conf_Req   (Write_Conf_Req), 
   .Write_Conf       (Write_Conf), 
   .Clk              (Clk), 
   .Reset            (Reset), 
   .Reset_Req        (Reset_Req), 
   .W_Req_Ser        (W_Req_Ser), 
   .Ser_Data         (Ser_Data), 
   .Write_Ser_Req    (Write_Serv_Req), 
   .Reset_Serv_Req   (Reset_Serv_Req), 
   .Conf_Addr_Enable (Conf_Addr_Enable)
); 

Data_Switch U_11( 
   .ID_nData (ID_nData), 
   .Word0    (Hamming_Data2), 
   .Word1    (Hamming_Data), 
   .Word2    (Hamming_Data1), 
   .Header   (Header), 
   .FifoIn   (FifoIn), 
   .Clk      (Clk), 
   .Reset    (Reset), 
   .winc_in  (winc_in), 
   .winc_out (winc_out), 
   .Full     (wfull), 
   .FullOut  (Fifo_Full)
); 

Hamming_Decode U_13( 
   .Hamming_Data (Word3), 
   .Data         (Data_Word0), 
   .Error        (Hamming_Error0), 
   .Read         (Read_Fifo), 
   .Clk          (Clk), 
   .Reset        (Reset), 
   .rclk         (Read_clk_fifo), 
   .Empty        (Empty)
); 

Hamming_Decode U_14( 
   .Hamming_Data (Word4), 
   .Data         (Data_Word1), 
   .Error        (Hamming_Error1), 
   .Read         (Read_Fifo), 
   .Clk          (Clk), 
   .Reset        (Reset), 
   .rclk         (Read_clk_fifo), 
   .Empty        (Empty)
); 

Hamming_Decode U_15( 
   .Hamming_Data (Word5), 
   .Data         (Data_Word2), 
   .Error        (Hamming_Error2), 
   .Read         (Read_Fifo), 
   .Clk          (Clk), 
   .Reset        (Reset), 
   .rclk         (Read_clk_fifo), 
   .Empty        (Empty)
); 

Hamming_Encode U_6( 
   .Data         (Word0), 
   .Hamming_Data (Hamming_Data2)
); 

Hamming_Encode U_8( 
   .Data         (Word1), 
   .Hamming_Data (Hamming_Data)
); 

Hamming_Encode U_9( 
   .Data         (Word2), 
   .Hamming_Data (Hamming_Data1)
); 

L1In_Counter U_0( 
   .Clk         (Clk), 
   .Reset       (Reset), 
   .L1          (TrigOut), 
   .L1In        (L1In), 
   .L1_Reg_Full (L1_Reg_Full), 
   .Error       (L1In_Counter_Error)
); 

L1Req_Counter U_1( 
   .Clk        (Clk), 
   .Reset      (Reset), 
   .NewDataReq (NewDataReq), 
   .L1Req      (L1Req), 
   .Error      (L1Req_Counter_Error)
); 

L1_Register U_2( 
   .Clk          (Clk), 
   .Reset        (Reset), 
   .L1In         (L1In), 
   .L1           (TrigOut), 
   .L1Req        (L1Req), 
   .NewL1Req     (NewL1Req), 
   .DataAvaleble (DataAvaleble), 
   .L1_Reg_Full  (L1_Reg_Full), 
   .Error        (L1_Register_Error)
); 

L1_Trig_Id U_18( 
   .Clk         (Clk), 
   .Reset       (Reset), 
   .L1_Trig_In  (L1_Trig_In), 
   .L1TrigId    (L1TrigId), 
   .ClearTrigId (ClearTrigId), 
   .Error       (L1_Trig_Id_Error)
); 

ReadOut_Processor U_5( 
   .Clk            (Clk), 
   .Reset          (Reset), 
   .DataAvaleble   (DataAvaleble), 
   .Token          (Token), 
   .Read           (Read), 
   .NewDataReq     (NewDataReq), 
   .NewL1Req       (NewL1Req), 
   .Full           (Fifo_Full), 
   .ReadyFormater  (ReadyFormater), 
   .Write          (winc_in), 
   .ID_nData       (ID_nData), 
   .EBWrite        (EBWrite), 
   .EBInWrite      (EBInWrite), 
   .TriggerFinish  (TriggerFinish), 
   .Write_Conf_Req (Write_Conf_Req), 
   .Write_Conf     (Write_Conf), 
   .Reset_Req      (Reset_Req), 
   .Error          (ReadOut_Processor_Error), 
   .Serv_Req       (W_Req_Ser), 
   .Write_Serv_Req (Write_Serv_Req), 
   .Reset_Serv_Req (Reset_Serv_Req), 
   .ErrorReq       (ErrorReq), 
   .DataAqEnable   (DataAqEnable), 
   .wclk           (wclk), 
   .NotFull        (NotFull)
); 

SkippedLV1 U_7( 
   .L1          (TrigOut), 
   .L1_Reg_Full (L1_Reg_Full), 
   .Skipped     (Skipped), 
   .ReadSkipped (ReadSkipped), 
   .Clk         (Clk), 
   .Reset       (Reset)
); 

Trigger U_16( 
   .L1_Trig_In    (L1_Trig_In), 
   .L1Trig_Out    (L1Trig_Out), 
   .Trigger_Count (Trigger_Count), 
   .L1_Reg_Full   (L1_Reg_Full), 
   .Clk           (Clk), 
   .Reset         (Reset), 
   .TrigOut       (TrigOut)
); 

data_split U_12( 
   .Data  (rdata), 
   .Word0 (Word3), 
   .Word1 (Word4), 
   .Word2 (Word5)
); 

fifo U_4( 
   .rclk   (Read_clk_fifo), 
   .rinc   (Read_Fifo), 
   .rrst_n (Reset), 
   .wclk   (wclk), 
   .wdata  (FifoIn), 
   .winc   (winc_out), 
   .wrst_n (Reset), 
   .rdata  (rdata), 
   .rempty (Empty), 
   .wfull  (wfull)
); 


endmodule // ReadOutController

