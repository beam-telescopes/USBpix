#ifndef SLAVEPRIMXFACE_COMMON_H
#define SLAVEPRIMXFACE_COMMON_H



enum slavePrimitiveIds {
	SLAVE_ECHO = 1,
	SLAVE_RW_MEMORY,
	SLAVE_SET_LED,
	SLAVE_RW_REG_FIELD,
	SLAVE_START_TASK,
	SLAVE_TALK_TASK,
	SLAVE_LOAD_DATA_FRAME,
//KICK ARS	SLAVE_LOAD_MASTER_XFACE,
//KICK ARS	SLAVE_FIT,
	SLAVE_CONFIGURE_ENVIRONMENT,
	SLAVE_EXPERT,
	SLAVE_NPRIMITIVES
};

typedef struct {
	UINT32 id; // useful for telling each slave his id 
} LoadMasterXfaceIn;

typedef struct {
	UINT32 control, status;
	UINT32 primBufferLoc, primBufferLen;
	UINT32 replyBufferLoc, replyBufferLen;
} LoadMasterXfaceOut;

enum {
	FIT_FLAG_MAXIMUM_LIKELIHOOD = 1,
	FIT_FLAG_MINIMUM_CHI2 = 2,
	FIT_FLAG_SAME_X_MANY_Y = 4
};

//** FIT PIXEL **

typedef struct {
	UINT32 flags;
	UINT32 nCurves;
	UINT32 nPoints;
	UINT32 maxIterations;
	UINT32 dataPtr;
} FitIn;

typedef struct {
	UINT32 coeffs[3]; // true values are floats 
	UINT32 iterations;
	UINT32 chi2; // true value is a float 
	UINT32 id; // for identifying pixel, if necessary 
} FitOut;

//** ERROR PIXEL **

// SDSP level errors
enum {
  ERRORTYPE_D_B0F,
  ERRORTYPE_D_EVENTSTART,
  ERRORTYPE_D_E0F,
  ERRORTYPE_D_ERRORCOUNT,
  ERRORTYPE_D_BCID,
  ERRORTYPE_D_L1ID,
  ERRORTYPE_D_TIMEOUT,
  ERRORTYPE_D_DATAINCORRECT,
  ERRORTYPE_D_BUFFEROVERFLOW,
  ERRORTYPE_D_ATLAS0,
  ERRORTYPE_D_ATLAS1,
  ERRORTYPE_D_ATLAS2,
  ERRORTYPE_D_ATLAS3,
  ERRORTYPE_D_ATLAS4,
  ERRORTYPE_D_ATLAS5,
  ERRORTYPE_D_ATLAS6,
  ERRORTYPE_D_ATLAS7,
  ERRORTYPE_D_ATLAS8,
  ERRORTYPE_D_ATLAS9,
  ERRORTYPE_D_ATLAS10,
  ERRORTYPE_D_ALMOSTFULL,
  ERRORTYPE_D_OVERFLOW,
  ERRORTYPE_D_HEADER,
  ERRORTYPE_D_SYNCHBIT,
  ERRORTYPE_D_INVROWCOL,
  ERRORTYPE_D_MCCSKIP,
  ERRORTYPE_D_FE_ERROR_EOC,
  ERRORTYPE_D_FE_ERROR_HAMMING,
  ERRORTYPE_D_FE_ERROR_REGPARITY,
  ERRORTYPE_D_FE_ERROR_HITPARITY,
  ERRORTYPE_D_FE_ERROR_BITFLIP,
  ERRORTYPE_D_MCC_ERROR_HITOVERFLOW,
  ERRORTYPE_D_MCC_ERROR_EOEOVERFLOW,
  ERRORTYPE_D_MCC_ERROR_L1CHKFAILFE,
  ERRORTYPE_D_MCC_ERROR_BCIDCHKFAIL,
  ERRORTYPE_D_MCC_ERROR_L1CHKFAILGLOBAL,
  ERRORTYPE_D_DATALOSS,
  ERRORTYPE_D_LAST
};

// module level errors
enum {
  ERRORTYPE_M_EVENT,
  ERRORTYPE_M_ERRORCOUNT,
  ERRORTYPE_M_TIMEOUTDATA,
  ERRORTYPE_M_MISSINGTRAILER,
  ERRORTYPE_M_BCID,
  ERRORTYPE_M_BCID_L1,
  ERRORTYPE_M_BCID_TIMEOUT,
  ERRORTYPE_M_BCID_PREAMBLE,
  ERRORTYPE_M_OVERFLOW,
  ERRORTYPE_M_OVERFLOW_HEADERTRAILER,
  ERRORTYPE_M_OVERFLOW_ZTRAILER,
  ERRORTYPE_M_INVROWCOL,
  ERRORTYPE_M_RAWDATA, 
  ERRORTYPE_M_FE_ERROR_EOC,
  ERRORTYPE_M_FE_ERROR_HAMMING,
  ERRORTYPE_M_FE_ERROR_REGPARITY,
  ERRORTYPE_M_FE_ERROR_HITPARITY,
  ERRORTYPE_M_FE_ERROR_BITPARITY,
  ERRORTYPE_M_FE_ERROR_U5,
  ERRORTYPE_M_FE_ERROR_U6,
  ERRORTYPE_M_FE_ERROR_U7,
  ERRORTYPE_M_MCC_ERROR_HITOVERFLOW,
  ERRORTYPE_M_MCC_ERROR_EOEOVERFLOW,
  ERRORTYPE_M_MCC_ERROR_L1FEFAIL,
  ERRORTYPE_M_MCC_ERROR_BCIDFAIL,
  ERRORTYPE_M_MCC_ERROR_L1GLOBALFAIL,
  ERRORTYPE_M_MCC_ERROR_U5,
  ERRORTYPE_M_MCC_ERROR_U6,
  ERRORTYPE_M_MCC_ERROR_U7,
  ERRORTYPE_M_LAST
};

// In calibration scans there will be 9 of these struct's: 
// 7 for each module, 
// 1 for the bad module, and 1 for the dsp.
// For the dsp, the first 3 entries in type are:
// B0Fcounter, E0Fcounter, and counter of events with errors,
// then it copies the ERRORTYPE_D_* list.
// For the modules, the first 2 entries in type are:
// Event count, and counter of events with errors,
// then it copies the ERRORTYPE_M_* list.
typedef struct {
  UINT16  fe;       	 	  // which FEs have the error	
  UINT32  type[40];               // holder for error type 
} ErrorInfo;


#endif
